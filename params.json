{"name":"m2x-go","tagline":"Go library for AT&T's M2X API","body":"# m2x\r\n\r\nGo library for [AT&T's M2X API](https://m2x.att.com). AT&T's M2X is a cloud-based data storage service and management toolset customized for the internet of things.\r\n\r\n## Installation\r\n\r\n\tgo get github.com/jsgoecke/m2x-go\r\n\r\n## Documentation\r\n\r\n[M2X @ Godoc.org](http://godoc.org/github.com/jsgoecke/m2x-go)\r\n\r\n## Usage\r\n\r\n### M2X Client\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"github.com/jsgoecke/m2x-go\"\r\n\t\"log\"\r\n\t\"os\"\r\n)\r\n\r\nfunc main() {\r\n\t// Create a client\r\n\tclient := m2x.NewClient(os.Getenv(\"M2X_API_KEY\"))\r\n\r\n\t// Create a blueprint\r\n\tblueprintData := make(map[string]string)\r\n\tblueprintData[\"name\"] = \"Go Blueprint\"\r\n\tblueprintData[\"description\"] = \"A blueprint for the Go lib for M2X\"\r\n\tblueprintData[\"visibility\"] = \"private\"\r\n\r\n\tblueprint, errorMessage := client.CreateBlueprint(blueprintData)\r\n\tif errorMessage != nil {\r\n\t\tlog.Println(errorMessage)\r\n\t}\r\n\r\n\t// Update a bluprint\r\n\tblueprintData[\"description\"] = \"A blueprint for the Go lib for AT&T M2X\"\r\n\terrorMessage = client.UpdateBlueprint(blueprint.Id, blueprintData)\r\n\r\n\t// Create a stream\r\n\tstreamData := make(map[string]interface{})\r\n\tunit := make(map[string]string)\r\n\tunit[\"label\"] = \"celcius\"\r\n\tunit[\"symbol\"] = \"C\"\r\n\tstreamData[\"unit\"] = unit\r\n\terrorMessage = client.UpdateFeedStream(blueprint.Feed, \"temperature\", streamData)\r\n\tif errorMessage != nil {\r\n\t\tlog.Println(\"Error creating stream\")\r\n\t}\r\n\r\n\t//Update location of the feed stream\r\n\tloc := make(map[string]interface{})\r\n\tloc[\"name\"] = \"Storage Room in Sevilla, Spain\"\r\n\tloc[\"latitude\"] = \"37.383055\"\r\n\tloc[\"longitude\"] = \"-5.996392\"\r\n\tloc[\"elevation\"] = \"5\"\r\n\terrorMessage = client.UpdateFeedLocation(blueprint.Feed, loc)\r\n\tif errorMessage != nil {\r\n\t\tlog.Println(\"Error updating location\")\r\n\t}\r\n\r\n\t// Create a trigger for the feed\r\n\ttriggerData := make(map[string]string)\r\n\ttriggerData[\"name\"] = \"foobar\"\r\n\ttriggerData[\"stream\"] = \"temperature\"\r\n\ttriggerData[\"condition\"] = \">\"\r\n\ttriggerData[\"value\"] = \"30\"\r\n\ttriggerData[\"callback_url\"] = \"http://45bad07a.ngrok.com/streamEvent\"\r\n\ttriggerData[\"status\"] = \"enabled\"\r\n\t_, errorMessage = client.CreateTrigger(blueprint.Feed, triggerData)\r\n\tif errorMessage != nil {\r\n\t\tlog.Println(\"Error creating trigger\")\r\n\t}\r\n\r\n\t// Update stream with data\r\n\tvalues := make(map[string]interface{})\r\n\tvalues[\"values\"] = []*m2x.Value{\r\n\t\t{\"2013-09-09T19:15:00Z\", \"32\"},\r\n\t\t{\"2013-09-09T19:16:00Z\", \"28 \"},\r\n\t\t{\"2013-09-09T19:17:00Z\", \"25\"},\r\n\t\t{\"2013-09-09T19:17:00Z\", \"40\"},\r\n\t}\r\n\terrorMessage = client.UpdateFeedStreamValues(blueprint.Feed, \"temperature\", values)\r\n\r\n\t// Delete the blueprint\r\n\tclient.DeleteBlueprint(blueprint.Id)\r\n}\r\n```\r\n### M2X Event Receiver\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"github.com/jsgoecke/m2x-go\"\r\n\t\"encoding/json\"\r\n\t\"github.com/codegangsta/martini\"\r\n\t\"io/ioutil\"\r\n\t\"log\"\r\n\t\"net/http\"\r\n)\r\n\r\nfunc main() {\r\n\tm := martini.Classic()\r\n\tm.Post(\"/streamEvent\", streamRequestHandler)\r\n\thttp.ListenAndServe(\":3000\", m)\r\n}\r\n\r\nfunc streamRequestHandler(w http.ResponseWriter, r *http.Request) {\r\n\tbody, _ := ioutil.ReadAll(r.Body)\r\n\tr.Body.Close()\r\n\ttriggerEvent, err := m2x.ParseTriggerEvent(body)\r\n\tif err != nil {\r\n\t\tlog.Println(err)\r\n\t} else {\r\n\t\tlog.Println(\"Received trigger event!\")\r\n\t\tjsonData, _ := json.MarshalIndent(triggerEvent, \"\", \"    \")\r\n\t\tlog.Println(string(jsonData[:]))\r\n\t}\r\n}\r\n```\r\n\r\n## Testing\r\n\r\nRight now the tests are a combination of unit tests and functional tests. For the functional\r\ntests to run, you will need to set an environment variable 'M2X_API_KEY' with a valid key. Keep in mind that the tests will add and remove elements from your account, and if a tests fail may orphan\r\nthe elements.\r\n\r\n\tgo test\r\n\r\n## Todo\r\n\r\n\t1. Mock out net/http requests in order to move functional tests to unit tests.\r\n\r\n## License\r\n\r\nMIT\r\n\r\n## Author\r\n\r\nJason Goecke ([@jsgoecke](http://twitter.com/jsgoecke))","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}